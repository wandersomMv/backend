from Model.Trabalhista.pjeTrabalhistaModel import PJETabalhistaModel
import  os
from selenium import *
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from time import  sleep
from Controller.Trabalhista.executeControllerTrabalhista import ExecutarTrabalhista
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

from Database.connDatabase import SQL
from Model.toolsModel import *
import random

try:

    for i in range(1,20,1):
        trt = i

        access = ['144.217.126.74', 'sa', 'becadv123', 'titanium_dev?charset=utf8']
        data = datetime(datetime.now().year - 5, datetime.now().month, datetime.now().day,
                        datetime.now().hour, datetime.now().minute, datetime.now().second)
        conn_database = SQL(access[0], access[1], access[2])
        dict_acp_arq = conn_database.search_process_for_update_trabalhista(top=20, trt = trt, data=data)
        random.shuffle(dict_acp_arq)
        #b=[('00116293620175030108', 44895, 'MG', None, None, None, None, None, None, 0)]
        #  prc_numero, prc_id, prc_estado, plp_status, cadastro, plp_codigo, plp_data_update,plp_id, plp_numero, novo
        #  n_proc, prc_id, plp_id, plp_data_update, log, state,processo
        # num[0], num[1], num[7],num[6], log, num[2],processo
        print("dict_acp_arq->", dict_acp_arq)
        # dict_acp_arq =  [('00106705820195030023', 47234, 'MG', None, None, None, None, None, None, 0)]

        ex = ExecutarTrabalhista(trt)
        a = ex.varredura_processos(dict_acp_arq,access)


        conn_database.__del__()



except AttributeError:
    print("Deu ruim aurelio")
    raise



# lista = [
# '00013101120145030109',
# '00116137320175030014',
# '00100310520185030143',
# '00106330720185030107',
# '00102925720185030114',
# '00110362020175030136',
# '00013101120145030109',
# ]
# 00101439020155030009
# lista = [
# '00117004820175030137', # 57
# '00013554420125030025', # 174
# '00116794020175030180', # 165
# '00116137320175030014', # 74
# '00100310520185030143', # 119
# '00106330720185030107', # 105
# '00102925720185030114', # 84
# '00110362020175030136', # 82
# '00013101120145030109',
# '00100448420185030181',
# '00010242820135030025',
# '00025360920135030005',
# '00024269220135030107',
# '00112465620155030002',
# '00100604120165030138',
# '00107030720155030179',
# '00100911520165030024',
# '00100881120165030105', # segredo de justi√ßa
# '00100072620165030020',
# '00001141320145030139',
# '00002724520145030179',
# '00002702120145030003',
# '00019015420145030179',
# '00005748120155030036',
# '00104632120165030005',
# '00104491620165030109',
# '00004515820145030185',
# '00101439020155030009',
# '00104593620165030020',
# '00007754520145030186',
# '00100727120185030013',
# '00103723720165030002',
# '00107395820165030003',
# '00108266320165030019',
# '00107591320165030112',
# '00013199120145030005',
# '00108381720165030136',
# '00106657420165030012',
# '00109916220165030035',
# '00105966420155030113',
# '00109003520165020111',
# '00111474720165030036',
# '00019096820145030005',
# '00110694320165030007',
# '00120200220155030030',
# '00109733120155030179',
# '00000344920145030139',
# '00018970220145030184',
# '00002733020145030179',
# '00111984520165030008',
# '00109938520165030179',
# '00111391720175030010',
# '00112823120165030110',
# '00113314220165030023',
# '00108066720165030150',
# '00113770520155030140',
# '00113991020165030017',
# '00114781020165030107',
# '00001208820155030008',
# '00113561820165030003',
# '00114840820165030013',
# '00118177920165030038',
# '00104513420175030017',
# '00103024420175030112',
# '00118906020165030035',
# '00115871520165030013',
# '00119552220165030143',
# '00117786620165030011',
# '00119598620165030037',
# '00119543720165030143',
# '00100563620175030019',
# '00101181620175030136',
# '00101273420175030182',
# '00100982520175030136',
# '00102251320175030184',
# '00102021420175030040',
# '00114604620165030185',
# '00101188520175030113',
# '00102688120175030108',
# '00117786020175030034',
# '00103757220165030137',
# '00103543120175030018',
# '00103216820175030009',
# '00101152920185030006',
# '00100910420185030005',
# '00104976620175030035',
# '00104968120175030035',
# '00104924120175030036',
# '00111297020175030107',
# '00117140720175030113',
# '00107703620175030038',
# '00106862220175030010',
# '00107709220175030181',
# '00107735320175030179',
# '00111814820175030113',
# '00101283120185030005',
# '00101245420185030179',
# '00111886120175030009',
# ]
# l =[]
#
# #00013554420125030025
# # for i in range(1, 5):
# l.append('00116794020175030180')
# # l.append('00013554420125030025')
#
# ex = ExecutarTrabalhista('3')
# a = ex.varredura_processos(l)

#  list_objects_process = [(process_platform, list_partes, list_advogs, list_aud, list_acp_pra, i_proc[7],[],
#                     [], [])]
# [prc_numero, prc_id, prc_estado, plp_status, cadastro, plp_codigo, plp_data_update, plp_id, plp_numero,]



#'j_id310'
# a = 'dsdsd'
# print("test", flush=True)
# print('aa', a)
# lista = [
# '00013554420125030025',
# '00117004820175030137',
# '00116794020175030180',
# '00116137320175030014',
# '00100310520185030143',
# '00106330720185030107',
# '00102925720185030114',
# '00110362020175030136',
# '00013101120145030109',
# '00100448420185030181',
# '00010242820135030025',
# '00025360920135030005',
# '00024269220135030107',
# '00112465620155030002',
# '00100604120165030138',
# '00107030720155030179',
# '00100911520165030024',
# '00100881120165030105',
# '00100072620165030020',
# '00001141320145030139',
# '00002724520145030179',
# '00002702120145030003',
# '00019015420145030179',
# '00005748120155030036',
# '00104632120165030005',
# '00104491620165030109',
# '00004515820145030185',
# '00101439020155030009',
# '00104593620165030020',
# '00007754520145030186',
# '00100727120185030013',
# '00103723720165030002',
# '00107395820165030003',
# '00108266320165030019',
# '00107591320165030112',
# '00013199120145030005',
# '00108381720165030136',
# '00106657420165030012',
# '00109916220165030035',
# '00105966420155030113',
# '00109003520165020111',
# '00111474720165030036',
# '00019096820145030005',
# '00110694320165030007',
# '00120200220155030030',
# '00109733120155030179',
# '00000344920145030139',
# '00018970220145030184',
# '00002733020145030179',
# '00111984520165030008',
# '00109938520165030179',
# '00111391720175030010',
# '00112823120165030110',
# '00113314220165030023',
# '00108066720165030150',
# '00113770520155030140',
# '00113991020165030017',
# '00114781020165030107',
# '00001208820155030008',
# '00113561820165030003',
# '00114840820165030013',
# '00118177920165030038',
# '00104513420175030017',
# '00103024420175030112',
# '00118906020165030035',
# '00115871520165030013',
# '00119552220165030143',
# '00117786620165030011',
# '00119598620165030037',
# '00119543720165030143',
# '00100563620175030019',
# '00101181620175030136',
# '00101273420175030182',
# '00100982520175030136',
# '00102251320175030184',
# '00102021420175030040',
# '00114604620165030185',
# '00101188520175030113',
# '00102688120175030108',
# '00117786020175030034',
# '00103757220165030137',
# '00103543120175030018',
# '00103216820175030009',
# '00101152920185030006',
# '00100910420185030005',
# '00104976620175030035',
# '00104968120175030035',
# '00104924120175030036',
# '00111297020175030107',
# '00117140720175030113',
# '00107703620175030038',
# '00106862220175030010',
# '00107709220175030181',
# '00107735320175030179',
# '00111814820175030113',
# '00101283120185030005',
# '00101245420185030179',
# '00111886120175030009',
# ]
